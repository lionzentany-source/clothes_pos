// Mocks generated by Mockito 5.4.6 from annotations
// in clothes_pos/test/mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:clothes_pos/data/datasources/attribute_dao.dart' as _i3;
import 'package:clothes_pos/data/models/attribute.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeAttribute_0 extends _i1.SmartFake implements _i2.Attribute {
  _FakeAttribute_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [AttributeDao].
///
/// See the documentation for Mockito's code generation for more information.
class MockAttributeDao extends _i1.Mock implements _i3.AttributeDao {
  MockAttributeDao() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i2.Attribute>> getAllAttributes() =>
      (super.noSuchMethod(
            Invocation.method(#getAllAttributes, []),
            returnValue: _i4.Future<List<_i2.Attribute>>.value(
              <_i2.Attribute>[],
            ),
          )
          as _i4.Future<List<_i2.Attribute>>);

  @override
  _i4.Future<_i2.Attribute> getAttributeById(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#getAttributeById, [id]),
            returnValue: _i4.Future<_i2.Attribute>.value(
              _FakeAttribute_0(
                this,
                Invocation.method(#getAttributeById, [id]),
              ),
            ),
          )
          as _i4.Future<_i2.Attribute>);

  @override
  _i4.Future<int> createAttribute(_i2.Attribute? attribute) =>
      (super.noSuchMethod(
            Invocation.method(#createAttribute, [attribute]),
            returnValue: _i4.Future<int>.value(0),
          )
          as _i4.Future<int>);

  @override
  _i4.Future<int> updateAttribute(_i2.Attribute? attribute) =>
      (super.noSuchMethod(
            Invocation.method(#updateAttribute, [attribute]),
            returnValue: _i4.Future<int>.value(0),
          )
          as _i4.Future<int>);

  @override
  _i4.Future<int> deleteAttribute(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#deleteAttribute, [id]),
            returnValue: _i4.Future<int>.value(0),
          )
          as _i4.Future<int>);

  @override
  _i4.Future<List<_i2.AttributeValue>> getAttributeValues(int? attributeId) =>
      (super.noSuchMethod(
            Invocation.method(#getAttributeValues, [attributeId]),
            returnValue: _i4.Future<List<_i2.AttributeValue>>.value(
              <_i2.AttributeValue>[],
            ),
          )
          as _i4.Future<List<_i2.AttributeValue>>);

  @override
  _i4.Future<int> createAttributeValue(_i2.AttributeValue? value) =>
      (super.noSuchMethod(
            Invocation.method(#createAttributeValue, [value]),
            returnValue: _i4.Future<int>.value(0),
          )
          as _i4.Future<int>);

  @override
  _i4.Future<int> updateAttributeValue(_i2.AttributeValue? value) =>
      (super.noSuchMethod(
            Invocation.method(#updateAttributeValue, [value]),
            returnValue: _i4.Future<int>.value(0),
          )
          as _i4.Future<int>);

  @override
  _i4.Future<int> deleteAttributeValue(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#deleteAttributeValue, [id]),
            returnValue: _i4.Future<int>.value(0),
          )
          as _i4.Future<int>);

  @override
  _i4.Future<List<_i2.AttributeValue>> getAttributeValuesForVariant(
    int? variantId,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getAttributeValuesForVariant, [variantId]),
            returnValue: _i4.Future<List<_i2.AttributeValue>>.value(
              <_i2.AttributeValue>[],
            ),
          )
          as _i4.Future<List<_i2.AttributeValue>>);
}
